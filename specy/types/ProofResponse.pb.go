// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regulatory/regulatory/TaskResponse.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Receipt struct {
	Statu   bool   `protobuf:"varint,1,opt,name=Statu,proto3" json:"Statu,omitempty"`
	ErrInfo string `protobuf:"bytes,2,opt,name=ErrInfo,proto3" json:"ErrInfo,omitempty"`
}

func (m *Receipt) Reset()         { *m = Receipt{} }
func (m *Receipt) String() string { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()    {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_d630e8d82f5d7f59, []int{0}
}
func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Receipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return m.Size()
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetStatu() bool {
	if m != nil {
		return m.Statu
	}
	return false
}

func (m *Receipt) GetErrInfo() string {
	if m != nil {
		return m.ErrInfo
	}
	return ""
}

type RuleFile struct {
	BindingHash  []byte   `protobuf:"bytes,1,opt,name=bindingHash,proto3" json:"bindingHash,omitempty"`
	RuleFileHash [][]byte `protobuf:"bytes,2,rep,name=ruleFileHash,proto3" json:"ruleFileHash,omitempty"`
}

func (m *RuleFile) Reset()         { *m = RuleFile{} }
func (m *RuleFile) String() string { return proto.CompactTextString(m) }
func (*RuleFile) ProtoMessage()    {}
func (*RuleFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_d630e8d82f5d7f59, []int{1}
}
func (m *RuleFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleFile.Merge(m, src)
}
func (m *RuleFile) XXX_Size() int {
	return m.Size()
}
func (m *RuleFile) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleFile.DiscardUnknown(m)
}

var xxx_messageInfo_RuleFile proto.InternalMessageInfo

func (m *RuleFile) GetBindingHash() []byte {
	if m != nil {
		return m.BindingHash
	}
	return nil
}

func (m *RuleFile) GetRuleFileHash() [][]byte {
	if m != nil {
		return m.RuleFileHash
	}
	return nil
}

type Proof struct {
	Rulefiles   []*RuleFile `protobuf:"bytes,1,rep,name=rulefiles,proto3" json:"rulefiles,omitempty"`
	Receipts    []*Receipt  `protobuf:"bytes,8,rep,name=receipts,proto3" json:"receipts,omitempty"`
	RequestHash []byte      `protobuf:"bytes,4,opt,name=RequestHash,proto3" json:"RequestHash,omitempty"`
	StateHash   []byte      `protobuf:"bytes,6,opt,name=StateHash,proto3" json:"StateHash,omitempty"`
	Statu       bool        `protobuf:"varint,2,opt,name=statu,proto3" json:"statu,omitempty"`
	Signature   []byte      `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_d630e8d82f5d7f59, []int{2}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetRulefiles() []*RuleFile {
	if m != nil {
		return m.Rulefiles
	}
	return nil
}

func (m *Proof) GetReceipts() []*Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *Proof) GetRequestHash() []byte {
	if m != nil {
		return m.RequestHash
	}
	return nil
}

func (m *Proof) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Proof) GetStatu() bool {
	if m != nil {
		return m.Statu
	}
	return false
}

func (m *Proof) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ProofResponse struct {
	TxHash       []byte   `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	ProofsHash   []byte   `protobuf:"bytes,2,opt,name=ProofsHash,proto3" json:"ProofsHash,omitempty"`
	Proofs       []*Proof `protobuf:"bytes,3,rep,name=Proofs,proto3" json:"Proofs,omitempty"`
	TeeSignature []byte   `protobuf:"bytes,4,opt,name=TeeSignature,proto3" json:"TeeSignature,omitempty"`
}

func (m *ProofResponse) Reset()         { *m = ProofResponse{} }
func (m *ProofResponse) String() string { return proto.CompactTextString(m) }
func (*ProofResponse) ProtoMessage()    {}
func (*ProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d630e8d82f5d7f59, []int{3}
}
func (m *ProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofResponse.Merge(m, src)
}
func (m *ProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProofResponse proto.InternalMessageInfo

func (m *ProofResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ProofResponse) GetProofsHash() []byte {
	if m != nil {
		return m.ProofsHash
	}
	return nil
}

func (m *ProofResponse) GetProofs() []*Proof {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *ProofResponse) GetTeeSignature() []byte {
	if m != nil {
		return m.TeeSignature
	}
	return nil
}

func init() {
	proto.RegisterType((*Receipt)(nil), "request_proto.Receipt")
	proto.RegisterType((*RuleFile)(nil), "request_proto.RuleFile")
	proto.RegisterType((*Proof)(nil), "request_proto.Proof")
	proto.RegisterType((*ProofResponse)(nil), "request_proto.ProofResponse")
}

func init() {
	proto.RegisterFile("regulatory/regulatory/TaskResponse.proto", fileDescriptor_d630e8d82f5d7f59)
}

var fileDescriptor_d630e8d82f5d7f59 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x75, 0xf4, 0x19, 0xe3, 0x55, 0x37, 0x83, 0xf8, 0xb2, 0x78, 0x2f, 0x84, 0xac, 0xf2, 0xe0,
	0x61, 0xc1, 0x52, 0x4a, 0xb7, 0x85, 0x96, 0x76, 0x27, 0x53, 0x57, 0xdd, 0x94, 0xd8, 0x5e, 0x6d,
	0x20, 0x64, 0xd2, 0x99, 0x09, 0xe8, 0x5f, 0x74, 0xdb, 0x3f, 0xea, 0xd2, 0x65, 0x97, 0x45, 0xa1,
	0xdf, 0x51, 0x32, 0x13, 0xeb, 0xc4, 0x5d, 0xce, 0xb9, 0xe7, 0xe6, 0x9e, 0x7b, 0xe6, 0xc2, 0x3f,
	0x81, 0xcb, 0x22, 0x8d, 0x15, 0x17, 0xeb, 0x13, 0xeb, 0x73, 0x2a, 0x38, 0x5f, 0x30, 0x94, 0x39,
	0xcf, 0x24, 0x8e, 0x73, 0xc1, 0x15, 0xa7, 0x03, 0x81, 0x2f, 0x05, 0x4a, 0xf5, 0xa0, 0x61, 0x78,
	0x01, 0x1d, 0x86, 0x8f, 0x98, 0xe4, 0x8a, 0x0e, 0xa1, 0x7d, 0xa7, 0x62, 0x55, 0x78, 0x24, 0x20,
	0x91, 0xcb, 0x0c, 0xa0, 0x1e, 0x74, 0xae, 0x84, 0xb8, 0xcd, 0x16, 0xdc, 0x6b, 0x06, 0x24, 0xea,
	0xb2, 0x3d, 0x0c, 0xa7, 0xe0, 0xb2, 0x22, 0xc5, 0xeb, 0x24, 0x45, 0x1a, 0x40, 0x6f, 0x9e, 0x64,
	0x4f, 0x49, 0xb6, 0xbc, 0x89, 0xe5, 0xb3, 0xfe, 0x43, 0x9f, 0xd9, 0x14, 0x0d, 0xa1, 0x2f, 0x2a,
	0xb5, 0x96, 0x34, 0x83, 0x56, 0xd4, 0x67, 0x35, 0x2e, 0xfc, 0x22, 0xd0, 0xd6, 0x9e, 0xe9, 0x19,
	0x74, 0xcb, 0xca, 0x22, 0x49, 0x51, 0x7a, 0x24, 0x68, 0x45, 0xbd, 0xc9, 0xef, 0x71, 0xcd, 0xf9,
	0x78, 0x3f, 0x9b, 0x1d, 0x94, 0x74, 0x02, 0xae, 0x30, 0xdb, 0x48, 0xcf, 0xd5, 0x5d, 0xa3, 0xe3,
	0x2e, 0x53, 0x66, 0x3f, 0xba, 0xd2, 0x3a, 0x33, 0x12, 0xed, 0xeb, 0x97, 0xb1, 0x6e, 0x51, 0xf4,
	0x0f, 0x74, 0xcb, 0x2c, 0x8c, 0x6f, 0x47, 0xd7, 0x0f, 0x44, 0x19, 0x9b, 0xd4, 0xb1, 0x35, 0x4d,
	0x6c, 0x1a, 0xe8, 0x9e, 0x64, 0x99, 0xc5, 0xaa, 0x10, 0xe8, 0xb5, 0xab, 0x9e, 0x3d, 0x11, 0xbe,
	0x11, 0x18, 0xd4, 0x1e, 0x87, 0x8e, 0xc0, 0x99, 0xad, 0xac, 0xec, 0x2a, 0x44, 0x7d, 0x00, 0x2d,
	0x94, 0x55, 0x68, 0x65, 0xcd, 0x62, 0xe8, 0x7f, 0x70, 0x0c, 0xf2, 0x5a, 0x7a, 0xdf, 0xe1, 0xd1,
	0xbe, 0x66, 0x4a, 0xa5, 0x29, 0x1f, 0x61, 0x86, 0x78, 0x30, 0x66, 0x96, 0xad, 0x71, 0x97, 0xe7,
	0xef, 0x5b, 0x9f, 0x6c, 0xb6, 0x3e, 0xf9, 0xdc, 0xfa, 0xe4, 0x75, 0xe7, 0x37, 0x36, 0x3b, 0xbf,
	0xf1, 0xb1, 0xf3, 0x1b, 0xf7, 0x7f, 0xad, 0xd3, 0x5a, 0xd9, 0x77, 0xa6, 0xd6, 0x39, 0xca, 0xb9,
	0xa3, 0x27, 0x9e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xff, 0x80, 0xf7, 0x8d, 0x02, 0x00,
	0x00,
}

func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrInfo) > 0 {
		i -= len(m.ErrInfo)
		copy(dAtA[i:], m.ErrInfo)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.ErrInfo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Statu {
		i--
		if m.Statu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RuleFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleFileHash) > 0 {
		for iNdEx := len(m.RuleFileHash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RuleFileHash[iNdEx])
			copy(dAtA[i:], m.RuleFileHash[iNdEx])
			i = encodeVarintProofResponse(dAtA, i, uint64(len(m.RuleFileHash[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BindingHash) > 0 {
		i -= len(m.BindingHash)
		copy(dAtA[i:], m.BindingHash)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.BindingHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receipts) > 0 {
		for iNdEx := len(m.Receipts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receipts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProofResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.StateHash) > 0 {
		i -= len(m.StateHash)
		copy(dAtA[i:], m.StateHash)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.StateHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestHash) > 0 {
		i -= len(m.RequestHash)
		copy(dAtA[i:], m.RequestHash)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.RequestHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Statu {
		i--
		if m.Statu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rulefiles) > 0 {
		for iNdEx := len(m.Rulefiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rulefiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProofResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeeSignature) > 0 {
		i -= len(m.TeeSignature)
		copy(dAtA[i:], m.TeeSignature)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.TeeSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProofResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProofsHash) > 0 {
		i -= len(m.ProofsHash)
		copy(dAtA[i:], m.ProofsHash)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.ProofsHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintProofResponse(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProofResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovProofResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Receipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Statu {
		n += 2
	}
	l = len(m.ErrInfo)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	return n
}

func (m *RuleFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BindingHash)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	if len(m.RuleFileHash) > 0 {
		for _, b := range m.RuleFileHash {
			l = len(b)
			n += 1 + l + sovProofResponse(uint64(l))
		}
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rulefiles) > 0 {
		for _, e := range m.Rulefiles {
			l = e.Size()
			n += 1 + l + sovProofResponse(uint64(l))
		}
	}
	if m.Statu {
		n += 2
	}
	l = len(m.RequestHash)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	l = len(m.StateHash)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovProofResponse(uint64(l))
		}
	}
	return n
}

func (m *ProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	l = len(m.ProofsHash)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	if len(m.Proofs) > 0 {
		for _, e := range m.Proofs {
			l = e.Size()
			n += 1 + l + sovProofResponse(uint64(l))
		}
	}
	l = len(m.TeeSignature)
	if l > 0 {
		n += 1 + l + sovProofResponse(uint64(l))
	}
	return n
}

func sovProofResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProofResponse(x uint64) (n int) {
	return sovProofResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Statu = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProofResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindingHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindingHash = append(m.BindingHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BindingHash == nil {
				m.BindingHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleFileHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleFileHash = append(m.RuleFileHash, make([]byte, postIndex-iNdEx))
			copy(m.RuleFileHash[len(m.RuleFileHash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProofResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rulefiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rulefiles = append(m.Rulefiles, &RuleFile{})
			if err := m.Rulefiles[len(m.Rulefiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Statu = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHash = append(m.RequestHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestHash == nil {
				m.RequestHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHash = append(m.StateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateHash == nil {
				m.StateHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, &Receipt{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProofResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofsHash = append(m.ProofsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofsHash == nil {
				m.ProofsHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, &Proof{})
			if err := m.Proofs[len(m.Proofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeeSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeeSignature = append(m.TeeSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.TeeSignature == nil {
				m.TeeSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProofResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProofResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProofResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProofResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProofResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProofResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProofResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProofResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProofResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProofResponse = fmt.Errorf("proto: unexpected end of group")
)
