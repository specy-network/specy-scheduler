// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regulatory/regulatory/regulator.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("regulatory/regulatory/regulator.proto", fileDescriptor_f327a04ecf6b0091)
}

var fileDescriptor_f327a04ecf6b0091 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x4a, 0x4d, 0x2f,
	0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xaa, 0xd4, 0xc7, 0xc6, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x2d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x89, 0x07, 0x73, 0xa5, 0x34, 0xb0, 0xeb, 0x0a,
	0x28, 0xca, 0xcf, 0x4f, 0x0b, 0x82, 0xa8, 0x84, 0x68, 0x94, 0xd2, 0xc4, 0xab, 0xb2, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x15, 0xa2, 0xd4, 0x28, 0x89, 0x8b, 0x33, 0x08, 0xa6, 0x42, 0x28, 0x94, 0x4b,
	0xc8, 0x3d, 0xb5, 0xc4, 0x39, 0x3f, 0xb7, 0x20, 0x27, 0x33, 0x31, 0x2f, 0x39, 0x15, 0xac, 0x41,
	0x48, 0x5a, 0x0f, 0xc5, 0x1d, 0x7a, 0xc8, 0x16, 0x4a, 0xc9, 0x60, 0x97, 0x84, 0xd8, 0xa1, 0xc4,
	0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0x64, 0x7e, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0xb2, 0x48, 0xae, 0xab, 0x40, 0x76, 0x6a, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0xd8,
	0x4c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0xcf, 0x3a, 0x96, 0x30, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegulatorClient is the client API for Regulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegulatorClient interface {
	GetComplianceProof(ctx context.Context, opts ...grpc.CallOption) (Regulator_GetComplianceProofClient, error)
}

type regulatorClient struct {
	cc grpc1.ClientConn
}

func NewRegulatorClient(cc grpc1.ClientConn) RegulatorClient {
	return &regulatorClient{cc}
}

func (c *regulatorClient) GetComplianceProof(ctx context.Context, opts ...grpc.CallOption) (Regulator_GetComplianceProofClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Regulator_serviceDesc.Streams[0], "/request_proto.Regulator/GetComplianceProof", opts...)
	if err != nil {
		return nil, err
	}
	x := &regulatorGetComplianceProofClient{stream}
	return x, nil
}

type Regulator_GetComplianceProofClient interface {
	Send(*ProofRequest) error
	Recv() (*ProofResponse, error)
	grpc.ClientStream
}

type regulatorGetComplianceProofClient struct {
	grpc.ClientStream
}

func (x *regulatorGetComplianceProofClient) Send(m *ProofRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *regulatorGetComplianceProofClient) Recv() (*ProofResponse, error) {
	m := new(ProofResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegulatorServer is the server API for Regulator service.
type RegulatorServer interface {
	GetComplianceProof(Regulator_GetComplianceProofServer) error
}

// UnimplementedRegulatorServer can be embedded to have forward compatible implementations.
type UnimplementedRegulatorServer struct {
}

func (*UnimplementedRegulatorServer) GetComplianceProof(srv Regulator_GetComplianceProofServer) error {
	return status.Errorf(codes.Unimplemented, "method GetComplianceProof not implemented")
}

func RegisterRegulatorServer(s grpc1.Server, srv RegulatorServer) {
	s.RegisterService(&_Regulator_serviceDesc, srv)
}

func _Regulator_GetComplianceProof_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegulatorServer).GetComplianceProof(&regulatorGetComplianceProofServer{stream})
}

type Regulator_GetComplianceProofServer interface {
	Send(*ProofResponse) error
	Recv() (*ProofRequest, error)
	grpc.ServerStream
}

type regulatorGetComplianceProofServer struct {
	grpc.ServerStream
}

func (x *regulatorGetComplianceProofServer) Send(m *ProofResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *regulatorGetComplianceProofServer) Recv() (*ProofRequest, error) {
	m := new(ProofRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Regulator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "request_proto.Regulator",
	HandlerType: (*RegulatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetComplianceProof",
			Handler:       _Regulator_GetComplianceProof_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "regulatory/regulatory/regulator.proto",
}
