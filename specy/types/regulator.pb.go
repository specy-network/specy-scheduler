// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Regulator.proto

package types

import (
	"context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskRequest struct {
	Taskhash             []byte   `protobuf:"bytes,1,opt,name=taskhash,proto3" json:"taskhash,omitempty"`
	RuleFile             string   `protobuf:"bytes,2,opt,name=rule_file,json=ruleFile,proto3" json:"rule_file,omitempty"`
	InputData            string   `protobuf:"bytes,3,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f45d6318edcec6e, []int{0}
}
func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRequest.Unmarshal(m, b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return xxx_messageInfo_TaskRequest.Size(m)
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetTaskhash() []byte {
	if m != nil {
		return m.Taskhash
	}
	return nil
}

func (m *TaskRequest) GetRuleFile() string {
	if m != nil {
		return m.RuleFile
	}
	return ""
}

func (m *TaskRequest) GetInputData() string {
	if m != nil {
		return m.InputData
	}
	return ""
}

type TaskResponse struct {
	Taskhash             []byte   `protobuf:"bytes,1,opt,name=taskhash,proto3" json:"taskhash,omitempty"`
	Status               bool     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ErrorInfo            string   `protobuf:"bytes,3,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	OutputData           string   `protobuf:"bytes,4,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskResponse) Reset()         { *m = TaskResponse{} }
func (m *TaskResponse) String() string { return proto.CompactTextString(m) }
func (*TaskResponse) ProtoMessage()    {}
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f45d6318edcec6e, []int{1}
}
func (m *TaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResponse.Unmarshal(m, b)
}
func (m *TaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResponse.Marshal(b, m, deterministic)
}
func (m *TaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResponse.Merge(m, src)
}
func (m *TaskResponse) XXX_Size() int {
	return xxx_messageInfo_TaskResponse.Size(m)
}
func (m *TaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResponse proto.InternalMessageInfo

func (m *TaskResponse) GetTaskhash() []byte {
	if m != nil {
		return m.Taskhash
	}
	return nil
}

func (m *TaskResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *TaskResponse) GetErrorInfo() string {
	if m != nil {
		return m.ErrorInfo
	}
	return ""
}

func (m *TaskResponse) GetOutputData() string {
	if m != nil {
		return m.OutputData
	}
	return ""
}

func (m *TaskResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskRequest)(nil), "request_proto.TaskRequest")
	proto.RegisterType((*TaskResponse)(nil), "request_proto.TaskResponse")
}

func init() { proto.RegisterFile("Regulator.proto", fileDescriptor_8f45d6318edcec6e) }

var fileDescriptor_8f45d6318edcec6e = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x5d, 0xff, 0x94, 0x66, 0xda, 0x22, 0xac, 0x28, 0xa1, 0x55, 0x2c, 0x3d, 0xe5, 0x94,
	0x8a, 0xbe, 0x81, 0x88, 0xe2, 0xc5, 0x43, 0xf0, 0xa4, 0x87, 0x30, 0xea, 0xa4, 0x0d, 0x5d, 0xb2,
	0x71, 0x67, 0xf6, 0x90, 0xb7, 0xf1, 0x51, 0x25, 0x9b, 0x1a, 0x15, 0xc4, 0xe3, 0xfc, 0x3e, 0x96,
	0xdf, 0xb7, 0x1f, 0x1c, 0x66, 0xb4, 0xf2, 0x06, 0xc5, 0xba, 0xb4, 0x76, 0x56, 0xac, 0x9e, 0x38,
	0x7a, 0xf7, 0xc4, 0x92, 0x87, 0x73, 0x41, 0x30, 0x7a, 0x44, 0xde, 0x64, 0x1d, 0xd4, 0x53, 0x18,
	0x0a, 0xf2, 0x66, 0x8d, 0xbc, 0x8e, 0xd5, 0x5c, 0x25, 0xe3, 0xac, 0xbf, 0xf5, 0x0c, 0x22, 0xe7,
	0x0d, 0xe5, 0x45, 0x69, 0x28, 0xde, 0x9d, 0xab, 0x24, 0xca, 0x86, 0x2d, 0xb8, 0x2d, 0x0d, 0xe9,
	0x33, 0x80, 0xb2, 0xaa, 0xbd, 0xe4, 0x6f, 0x28, 0x18, 0xef, 0x85, 0x34, 0x0a, 0xe4, 0x06, 0x05,
	0x17, 0x1f, 0x0a, 0xc6, 0x9d, 0x87, 0x6b, 0x5b, 0x31, 0xfd, 0x2b, 0x3a, 0x81, 0x01, 0x0b, 0x8a,
	0xe7, 0x60, 0x19, 0x66, 0xdb, 0xab, 0x75, 0x90, 0x73, 0xd6, 0xe5, 0x65, 0x55, 0xd8, 0x2f, 0x47,
	0x20, 0xf7, 0x55, 0x61, 0xf5, 0x39, 0x8c, 0xac, 0x97, 0xbe, 0xc3, 0x7e, 0xc8, 0xa1, 0x43, 0x6d,
	0x09, 0x7d, 0x0a, 0x11, 0x97, 0xab, 0x0a, 0xc5, 0x3b, 0x8a, 0x0f, 0x82, 0xf4, 0x1b, 0x5c, 0x3e,
	0x43, 0xd4, 0x6f, 0xa5, 0x1f, 0x60, 0x72, 0x47, 0xb2, 0x6d, 0xec, 0x8d, 0xe8, 0x69, 0xfa, 0x6b,
	0xb7, 0xf4, 0xc7, 0x68, 0xd3, 0xd9, 0x9f, 0x59, 0xf7, 0xd1, 0xc5, 0x4e, 0xa2, 0x2e, 0xd4, 0xf5,
	0xf1, 0xd3, 0x91, 0x23, 0x83, 0x0d, 0xb9, 0x25, 0xd7, 0xf4, 0xda, 0x2c, 0xa5, 0xa9, 0x89, 0x5f,
	0x06, 0xe1, 0xc1, 0xd5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xb5, 0x28, 0x34, 0xa6, 0x01,
	0x00, 0x00,
}


// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Regulator_GetTaskResult_FullMethodName = "/request_proto.Regulator/GetTaskResult"
)

// RegulatorClient is the client API for Regulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegulatorClient interface {
	GetTaskResult(ctx context.Context, opts ...grpc.CallOption) (Regulator_GetTaskResultClient, error)
}

type regulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewRegulatorClient(cc grpc.ClientConnInterface) RegulatorClient {
	return &regulatorClient{cc}
}

func (c *regulatorClient) GetTaskResult(ctx context.Context, opts ...grpc.CallOption) (Regulator_GetTaskResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &Regulator_ServiceDesc.Streams[0], Regulator_GetTaskResult_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &regulatorGetTaskResultClient{stream}
	return x, nil
}

type Regulator_GetTaskResultClient interface {
	Send(*TaskRequest) error
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type regulatorGetTaskResultClient struct {
	grpc.ClientStream
}

func (x *regulatorGetTaskResultClient) Send(m *TaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *regulatorGetTaskResultClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegulatorServer is the server API for Regulator service.
// All implementations must embed UnimplementedRegulatorServer
// for forward compatibility
type RegulatorServer interface {
	GetTaskResult(Regulator_GetTaskResultServer) error
	mustEmbedUnimplementedRegulatorServer()
}

// UnimplementedRegulatorServer must be embedded to have forward compatible implementations.
type UnimplementedRegulatorServer struct {
}

func (UnimplementedRegulatorServer) GetTaskResult(Regulator_GetTaskResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskResult not implemented")
}
func (UnimplementedRegulatorServer) mustEmbedUnimplementedRegulatorServer() {}

// UnsafeRegulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegulatorServer will
// result in compilation errors.
type UnsafeRegulatorServer interface {
	mustEmbedUnimplementedRegulatorServer()
}

func RegisterRegulatorServer(s grpc.ServiceRegistrar, srv RegulatorServer) {
	s.RegisterService(&Regulator_ServiceDesc, srv)
}

func _Regulator_GetTaskResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegulatorServer).GetTaskResult(&regulatorGetTaskResultServer{stream})
}

type Regulator_GetTaskResultServer interface {
	Send(*TaskResponse) error
	Recv() (*TaskRequest, error)
	grpc.ServerStream
}

type regulatorGetTaskResultServer struct {
	grpc.ServerStream
}

func (x *regulatorGetTaskResultServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *regulatorGetTaskResultServer) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Regulator_ServiceDesc is the grpc.ServiceDesc for Regulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Regulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "request_proto.Regulator",
	HandlerType: (*RegulatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskResult",
			Handler:       _Regulator_GetTaskResult_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Regulator.proto",
}
